{"version":3,"file":"static/js/671.db74345e.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","components/InputForm/InputForm.styled.jsx","components/InputForm/InputForm.jsx","components/ContactList/Contacts.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  align-items: flex-start;\n  padding: 10px;\n  margin-bottom: 30px;\n`;\n\nexport const Lable = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 200px;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  font-size: 20px;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px,\n    rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\n`;\n\nexport const Button = styled.button`\n  padding: 6px;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px,\n    rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;\n`;\n","import { useState } from \"react\";\nimport { FormContainer, Lable, Input, Button } from \"./InputForm.styled\";\nimport { selectContacts } from \"redux/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contactsOperations\";\n\nexport const InputForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setPhone] = useState(\"\");\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onInputName = event => {\n    setName(event.target.value);\n  };\n\n  const onInputPhone = event => {\n    setPhone(event.target.value);\n  };\n\n  const checkContactAvailability = newData => {\n    return contacts.find(\n      ({ name }) => name.toLowerCase() === newData.name.toLowerCase()\n    );\n  };\n\n  const formSubmitHandler = newData => {\n    if (checkContactAvailability(newData)) {\n      alert(`${newData.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newData));\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const name = event.target.elements.name.value;\n    const number = event.target.elements.number.value;\n    const data = { name, number };\n\n    formSubmitHandler(data);\n    formReset();\n  };\n\n  const formReset = () => {\n    setName(\"\");\n    setPhone(\"\");\n  };\n\n  return (\n    <FormContainer onSubmit={onSubmit}>\n      <Lable>\n        Name:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={onInputName}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Lable>\n\n      <Lable>\n        Phone:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={onInputPhone}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Lable>\n\n      <Button type=\"submit\">Add contact</Button>\n    </FormContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  padding: 10px;\n  width: 500px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  justify-content: space-between;\n  margin-top: 0;\n  margin-bottom: 10px;\n`;\n","import { List, ListItem } from './Contacts.styled';\nimport { Button } from 'components/InputForm/InputForm.styled';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteContact } from 'redux/contactsOperations';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const getFilteredContacts = () => {\n    const normilizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normilizeFilter)\n    );\n  };\n\n  const visibleContacts = getFilteredContacts();\n\n  return (\n    <List>\n      {visibleContacts.map(({ name, id, number }) => {\n        return (\n          <ListItem key={id}>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <Button onClick={() => onDelete(id)}>Delete</Button>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","import { Input, Lable } from 'components/InputForm/InputForm.styled';\nimport { selectFilter } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n  return (\n    <Lable>\n      Find contact by name\n      <Input type=\"text\" value={filterValue} onChange={changeFilter} />\n    </Lable>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px;\n  font-size: 20px;\n`;\nexport const Heading = styled.h1`\n  margin-top: 0;\n  margin-bottom: 20px;\n  font-size: 40px;\n  font-weight: 700;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 10px;\n  font-size: 30px;\n  font-weight: 500;\n`;\n","import { InputForm } from 'components/InputForm/InputForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container, Heading, Title } from './Contacts.styled';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectIsLoggedIn,\n} from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const isLogedIn = useSelector(selectIsLoggedIn);\n\n  if (!isLogedIn) {\n    return <p>Please log in or Register to use Contact book</p>;\n  }\n\n  return (\n    <Container>\n      <Heading>Contacts</Heading>\n      <InputForm />\n      {contacts.length > 0 && <Title>Contacts</Title>}\n      {contacts.length > 0 && <Filter />}\n      <ContactList />\n      {isLoading && !error && <p>Request in progress...</p>}\n      {error && <b>{error}</b>}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","FormContainer","styled","Lable","Input","Button","InputForm","useState","name","setName","number","setPhone","contacts","useSelector","selectContacts","dispatch","useDispatch","formSubmitHandler","newData","find","toLowerCase","checkContactAvailability","addContact","alert","formReset","onSubmit","event","preventDefault","target","elements","type","onChange","pattern","title","required","List","ListItem","ContactList","filter","selectFilter","useEffect","fetchContacts","visibleContacts","normilizeFilter","contact","includes","getFilteredContacts","map","id","onClick","contactId","deleteContact","Filter","filterValue","setFilter","currentTarget","Container","Heading","Title","isLoading","selectIsLoading","error","selectError","selectIsLoggedIn","length"],"sourceRoot":""}